package main

import (
	"fmt"
	"os"

	"github.com/spf13/cobra"
	"github.com/volatiletech/abcweb/v5/abcdatabase"
	"github.com/volatiletech/abcweb/v5/abcserver"
	"go.uber.org/zap"
)

//go:generate wire

// These are set by the linker when running the "abcweb build" command.
var version = "unknown"
var buildTime = "unknown"

func main() {
	// Display the version hash and build time
	args := os.Args
	if len(args) == 2 && args[1] == "--version" {
		fmt.Println(fmt.Sprintf("Version: %q, built on %s.", version, buildTime))
		return
	}
	
	// Setup the cli
	root := rootSetup()

	if err := root.Execute(); err != nil {
		fmt.Println("root command execution failed:", err)
		os.Exit(1)
	}
}

func runRootCmd(cmd *cobra.Command, args []string) {
	a, cleanup, err := BuildApp(cmd.Flags())
	if err != nil {
		fmt.Println("failed to initialize application:", err)
		os.Exit(1)
	}
	defer cleanup()

	// Check if using the latest database migration if EnforceLatestMigration
	if a.Config.DB.EnforceMigration {
		migrated, version, err := abcdatabase.IsMigrated(a.Config.DB)
		if err != nil && err != abcdatabase.ErrNoMigrations {
			fmt.Println("failed to check if using latest migration:", err)
			os.Exit(1)
		}
		if !migrated && err != abcdatabase.ErrNoMigrations {
			fmt.Printf("database is out of sync with migrations, database version: %d\n", version)
			os.Exit(1)
		}
	}

	err = abcserver.StartServer(a.Config.Server, a.Router, a.Log, nil) 
	if err != nil {
		a.Log.Error("server failed", zap.Error(err))
		os.Exit(1)
	}
}
