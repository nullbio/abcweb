package main

import (
	"path/filepath"
	"fmt"
	"os"

	"github.com/volatiletech/abcweb/abcconfig"
	"github.com/volatiletech/abcweb/abcserver"
	"github.com/volatiletech/abcweb/abcconfig"
	"github.com/volatiletech/abcweb/abcdatabase"
	"{{.ImportPath}}/app"
	"github.com/pkg/errors"
	"github.com/volatiletech/mig"
	"github.com/spf13/cobra"
)

// rootSetup sets up the root cobra command
func rootSetup(a *app.App) *cobra.Command {
	root := &cobra.Command{
		Use:   "{{.AppName}} [flags]",
		Short: "{{.AppName}} web app server",
		RunE: func(cmd *cobra.Command, args []string) error {
			return abcserver.StartServer(a.Config.Server, a.Router, a.Log, nil) 
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return Setup(a, cmd.Flags())
		},
	}

	// Register the cmd-line flags for --help output
	root.Flags().AddFlagSet(abcconfig.NewFlagSet())
	return root
}

// migrateSetup sets up the migrate command and returns it.
//
// The migrate up and down command is built into the app so that you do not
// need to deploy abcweb to your server to run your migrations.
func migrateSetup() *cobra.Command { 
	migrate := &cobra.Command{
		Use:   "migrate",
		Short: "Run your database migrations",
		RunE: func(cmd *cobra.Command, args []string) error {
			cfg := new(app.Config)
			c := abcconfig.NewConfig("{{.AppEnvName}}")

			v, err := c.Bind(cmd.Flags(), cfg)
			if err != nil {
				return errors.Wrap(err, "cannot bind app config")
			}

			if _, err := os.Stat(filepath.Join("db", "migrations")); err != nil {
				return errors.Wrap(err, "could not find migrations folder")
			}

			connStr, err := abcdatabase.GetConnStr(cfg.DB)
			if err != nil {
				return errors.Wrap(err, "could not create connection string")
			}

			if v.GetBool("down") {
				name, err := mig.Down(cfg.DB.DB, connStr, filepath.Join("db", "migrations"))
				if err != nil {
					return errors.Wrap(err, "call to mig down failed")
				}
				fmt.Printf("rolled back migration %q\n", name)
			} else {
				count, err := mig.Up(cfg.DB.DB, connStr, filepath.Join("db", "migrations"))
				if err != nil {
					return errors.Wrap(err, "call to mig up failed")
				}
				fmt.Printf("migrated %d database migrations\n", count)
			}

			return nil
		},
	}

	migrate.Flags().BoolP("down", "d", false, "Roll back the database migration version by one")
	migrate.Flags().StringP("env", "e", "prod", "The database config file environment to load")
	// Add the database config flags
	migrate.Flags().AddFlagSet(abcconfig.NewDBFlagSet())
	
	return migrate
}
