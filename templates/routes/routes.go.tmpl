package routes

import (
	"net/http"

	"{{.ImportPath}}/controllers"
	"{{.ImportPath}}/app"
	"github.com/go-chi/chi"
	"github.com/volatiletech/abcweb/v5/abcmiddleware"
	"github.com/volatiletech/abcweb/v5/abcrender"
	"github.com/volatiletech/abcweb/v5/abcserver"
	"github.com/volatiletech/abcweb/v5/abcsessions"
)

// NewRouter creates a new router
func NewRouter(
	cfg *app.Config,
	errMgr *abcmiddleware.ErrorManager,
	root controllers.Root,
	middlewares []abcmiddleware.MiddlewareFunc,
	manifest map[string]string,
	renderer abcrender.Renderer,
	{{if not .NoSessions -}}
	sessions abcsessions.Overseer,
	{{end -}}
	) *chi.Mux {

	router := chi.NewRouter()

	for _, middleware := range middlewares {
		router.Use(middleware)
	}
	
	// 404 route handler
	notFound := abcserver.NewNotFoundHandler(manifest)
	router.NotFound(notFound.Handler(cfg.Server, renderer))

	// 405 route handler
	methodNotAllowed := abcserver.NewMethodNotAllowedHandler()
	router.MethodNotAllowed(methodNotAllowed.Handler(renderer))
	
	errMgr.Add(abcmiddleware.NewError(controllers.ErrUnauthorized, http.StatusUnauthorized, "layouts/errors", "errors/401", nil))
	errMgr.Add(abcmiddleware.NewError(controllers.ErrForbidden, http.StatusForbidden, "layouts/errors", "errors/403", nil))

	// Make a pointer to the errMgr.Errors function so it's easier to call
	e := errMgr.Errors

	main := controllers.Main{Root: root}
	router.Get("/", e(main.Home))

	return router
}
